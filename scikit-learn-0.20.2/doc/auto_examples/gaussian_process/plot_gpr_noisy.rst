.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_gaussian_process_plot_gpr_noisy.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_gaussian_process_plot_gpr_noisy.py:


=============================================================
带有噪声水平估计的高斯过程回归(GPR)
=============================================================

这个例子展示了带有sum-kernel的GPR(包括WhiteKernel)可以估计数据的噪声水平。
对数边缘似然(LML)景观图表明：LML存在两个局部极大值.
第一个图对应于一个高噪声水平和大长度尺度的模型，它解释了噪声带给数据的所有变化。
第二个图对应于噪声水平较小，长度尺度较短的模型，主要解释了与噪声无关的函数关系带给数据的大多数变化。
第二个模型具有较高的likelihood，但是，根据超参数的初始值，基于梯度的优化也可能收敛到高噪声的解。
因此，以不同的初始化状态进行多次重复优化是很重要的。




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/gaussian_process/images/sphx_glr_plot_gpr_noisy_000.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/gaussian_process/images/sphx_glr_plot_gpr_noisy_001.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/gaussian_process/images/sphx_glr_plot_gpr_noisy_002.png
            :class: sphx-glr-multi-img





.. code-block:: python

    print(__doc__)

    # Authors: Jan Hendrik Metzen <jhm@informatik.uni-bremen.de>
    # 翻译者：http://www.studyai.com/antares
    # License: BSD 3 clause

    import numpy as np

    from matplotlib import pyplot as plt
    from matplotlib.colors import LogNorm

    from sklearn.gaussian_process import GaussianProcessRegressor
    from sklearn.gaussian_process.kernels import RBF, WhiteKernel


    rng = np.random.RandomState(0)
    X = rng.uniform(0, 5, 20)[:, np.newaxis]
    y = 0.5 * np.sin(3 * X[:, 0]) + rng.normal(0, 0.5, X.shape[0])

    # First run
    plt.figure(0)
    kernel = 1.0 * RBF(length_scale=100.0, length_scale_bounds=(1e-2, 1e3)) \
        + WhiteKernel(noise_level=1, noise_level_bounds=(1e-10, 1e+1))
    gp = GaussianProcessRegressor(kernel=kernel,
                                  alpha=0.0).fit(X, y)
    X_ = np.linspace(0, 5, 100)
    y_mean, y_cov = gp.predict(X_[:, np.newaxis], return_cov=True)
    plt.plot(X_, y_mean, 'k', lw=3, zorder=9)
    plt.fill_between(X_, y_mean - np.sqrt(np.diag(y_cov)),
                     y_mean + np.sqrt(np.diag(y_cov)),
                     alpha=0.5, color='k')
    plt.plot(X_, 0.5*np.sin(3*X_), 'r', lw=3, zorder=9)
    plt.scatter(X[:, 0], y, c='r', s=50, zorder=10, edgecolors=(0, 0, 0))
    plt.title("Initial: %s\nOptimum: %s\nLog-Marginal-Likelihood: %s"
              % (kernel, gp.kernel_,
                 gp.log_marginal_likelihood(gp.kernel_.theta)))
    plt.tight_layout()

    # Second run
    plt.figure(1)
    kernel = 1.0 * RBF(length_scale=1.0, length_scale_bounds=(1e-2, 1e3)) \
        + WhiteKernel(noise_level=1e-5, noise_level_bounds=(1e-10, 1e+1))
    gp = GaussianProcessRegressor(kernel=kernel,
                                  alpha=0.0).fit(X, y)
    X_ = np.linspace(0, 5, 100)
    y_mean, y_cov = gp.predict(X_[:, np.newaxis], return_cov=True)
    plt.plot(X_, y_mean, 'k', lw=3, zorder=9)
    plt.fill_between(X_, y_mean - np.sqrt(np.diag(y_cov)),
                     y_mean + np.sqrt(np.diag(y_cov)),
                     alpha=0.5, color='k')
    plt.plot(X_, 0.5*np.sin(3*X_), 'r', lw=3, zorder=9)
    plt.scatter(X[:, 0], y, c='r', s=50, zorder=10, edgecolors=(0, 0, 0))
    plt.title("Initial: %s\nOptimum: %s\nLog-Marginal-Likelihood: %s"
              % (kernel, gp.kernel_,
                 gp.log_marginal_likelihood(gp.kernel_.theta)))
    plt.tight_layout()

    # Plot LML landscape
    plt.figure(2)
    theta0 = np.logspace(-2, 3, 49)
    theta1 = np.logspace(-2, 0, 50)
    Theta0, Theta1 = np.meshgrid(theta0, theta1)
    LML = [[gp.log_marginal_likelihood(np.log([0.36, Theta0[i, j], Theta1[i, j]]))
            for i in range(Theta0.shape[0])] for j in range(Theta0.shape[1])]
    LML = np.array(LML).T

    vmin, vmax = (-LML).min(), (-LML).max()
    vmax = 50
    level = np.around(np.logspace(np.log10(vmin), np.log10(vmax), 50), decimals=1)
    plt.contour(Theta0, Theta1, -LML,
                levels=level, norm=LogNorm(vmin=vmin, vmax=vmax))
    plt.colorbar()
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("Length-scale")
    plt.ylabel("Noise-level")
    plt.title("Log-marginal-likelihood")
    plt.tight_layout()

    plt.show()

**Total running time of the script:** ( 0 minutes  3.504 seconds)


.. _sphx_glr_download_auto_examples_gaussian_process_plot_gpr_noisy.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_gpr_noisy.py <plot_gpr_noisy.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_gpr_noisy.ipynb <plot_gpr_noisy.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
