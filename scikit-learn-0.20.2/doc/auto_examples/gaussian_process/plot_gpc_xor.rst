.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_gaussian_process_plot_gpc_xor.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_gaussian_process_plot_gpc_xor.py:


========================================================================
高斯过程分类器(GPC)在 XOR 数据集上的应用
========================================================================

此示例展示了将GPC用于XOR数据。参与比较试验的是 平稳的各向同性的核(RBF)和非平稳的核(DotProduct)。 
在这个特定的数据集上，DotProduct核获得了更好的结果， 因为类边界是线性的，并且与坐标轴重合。 
然而，实际上，平稳的核 诸如 RBF 经常获得更好结果。




.. image:: /auto_examples/gaussian_process/images/sphx_glr_plot_gpc_xor_001.png
    :class: sphx-glr-single-img





.. code-block:: python

    print(__doc__)

    # Authors: Jan Hendrik Metzen <jhm@informatik.uni-bremen.de>
    # 翻译者：http://www.studyai.com/antares
    # License: BSD 3 clause

    import numpy as np
    import matplotlib.pyplot as plt

    from sklearn.gaussian_process import GaussianProcessClassifier
    from sklearn.gaussian_process.kernels import RBF, DotProduct


    xx, yy = np.meshgrid(np.linspace(-3, 3, 50),
                         np.linspace(-3, 3, 50))
    rng = np.random.RandomState(0)
    X = rng.randn(200, 2)
    Y = np.logical_xor(X[:, 0] > 0, X[:, 1] > 0)

    # fit the model
    plt.figure(figsize=(10, 5))
    kernels = [1.0 * RBF(length_scale=1.0), 1.0 * DotProduct(sigma_0=1.0)**2]
    for i, kernel in enumerate(kernels):
        clf = GaussianProcessClassifier(kernel=kernel, warm_start=True).fit(X, Y)

        # plot the decision function for each datapoint on the grid
        Z = clf.predict_proba(np.vstack((xx.ravel(), yy.ravel())).T)[:, 1]
        Z = Z.reshape(xx.shape)

        plt.subplot(1, 2, i + 1)
        image = plt.imshow(Z, interpolation='nearest',
                           extent=(xx.min(), xx.max(), yy.min(), yy.max()),
                           aspect='auto', origin='lower', cmap=plt.cm.PuOr_r)
        contours = plt.contour(xx, yy, Z, levels=[0.5], linewidths=2,
                               colors=['k'])
        plt.scatter(X[:, 0], X[:, 1], s=30, c=Y, cmap=plt.cm.Paired,
                    edgecolors=(0, 0, 0))
        plt.xticks(())
        plt.yticks(())
        plt.axis([-3, 3, -3, 3])
        plt.colorbar(image)
        plt.title("%s\n Log-Marginal-Likelihood:%.3f"
                  % (clf.kernel_, clf.log_marginal_likelihood(clf.kernel_.theta)),
                  fontsize=12)

    plt.tight_layout()
    plt.show()

**Total running time of the script:** ( 0 minutes  1.196 seconds)


.. _sphx_glr_download_auto_examples_gaussian_process_plot_gpc_xor.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_gpc_xor.py <plot_gpc_xor.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_gpc_xor.ipynb <plot_gpc_xor.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
