.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_linear_model_plot_multi_task_lasso_support.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_linear_model_plot_multi_task_lasso_support.py:


=============================================
使用 multi-task Lasso 的联合特征选择
=============================================

multi-task lasso 允许联合的拟合多元回归问题，强制那些被选择的特征在所有任务上都一样。
此示例模拟了一些序贯测量(sequential measurements)，每个任务都是即时的，相关的特征的幅值在变得相同的时候随时间而变化。
multi-task lasso强制那些在一个时间点被选择的特征就是为所有的时间点选择的。这使得使用 Lasso 的特征选择更加稳定。





.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/linear_model/images/sphx_glr_plot_multi_task_lasso_support_001.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/linear_model/images/sphx_glr_plot_multi_task_lasso_support_002.png
            :class: sphx-glr-multi-img





.. code-block:: python

    print(__doc__)

    # Author: Alexandre Gramfort <alexandre.gramfort@inria.fr>
    # License: BSD 3 clause
    # 翻译者：studyai.com的Antares博士


    import matplotlib.pyplot as plt
    import numpy as np

    from sklearn.linear_model import MultiTaskLasso, Lasso

    rng = np.random.RandomState(42)

    # Generate some 2D coefficients with sine waves with random frequency and phase
    n_samples, n_features, n_tasks = 100, 30, 40
    n_relevant_features = 5
    coef = np.zeros((n_tasks, n_features))
    times = np.linspace(0, 2 * np.pi, n_tasks)
    for k in range(n_relevant_features):
        coef[:, k] = np.sin((1. + rng.randn(1)) * times + 3 * rng.randn(1))

    X = rng.randn(n_samples, n_features)
    Y = np.dot(X, coef.T) + rng.randn(n_samples, n_tasks)

    coef_lasso_ = np.array([Lasso(alpha=0.5).fit(X, y).coef_ for y in Y.T])
    coef_multi_task_lasso_ = MultiTaskLasso(alpha=1.).fit(X, Y).coef_

    # #############################################################################
    # Plot support and time series
    fig = plt.figure(figsize=(8, 5))
    plt.subplot(1, 2, 1)
    plt.spy(coef_lasso_)
    plt.xlabel('Feature')
    plt.ylabel('Time (or Task)')
    plt.text(10, 5, 'Lasso')
    plt.subplot(1, 2, 2)
    plt.spy(coef_multi_task_lasso_)
    plt.xlabel('Feature')
    plt.ylabel('Time (or Task)')
    plt.text(10, 5, 'MultiTaskLasso')
    fig.suptitle('Coefficient non-zero location')

    feature_to_plot = 0
    plt.figure()
    lw = 2
    plt.plot(coef[:, feature_to_plot], color='seagreen', linewidth=lw,
             label='Ground truth')
    plt.plot(coef_lasso_[:, feature_to_plot], color='cornflowerblue', linewidth=lw,
             label='Lasso')
    plt.plot(coef_multi_task_lasso_[:, feature_to_plot], color='gold', linewidth=lw,
             label='MultiTaskLasso')
    plt.legend(loc='upper center')
    plt.axis('tight')
    plt.ylim([-1.1, 1.1])
    plt.show()

**Total running time of the script:** ( 0 minutes  0.185 seconds)


.. _sphx_glr_download_auto_examples_linear_model_plot_multi_task_lasso_support.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_multi_task_lasso_support.py <plot_multi_task_lasso_support.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_multi_task_lasso_support.ipynb <plot_multi_task_lasso_support.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
