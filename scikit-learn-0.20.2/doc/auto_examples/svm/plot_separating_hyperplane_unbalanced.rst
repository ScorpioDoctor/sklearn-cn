.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_svm_plot_separating_hyperplane_unbalanced.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_svm_plot_separating_hyperplane_unbalanced.py:


=================================================
SVM: 不平衡分类问题的分割超平面
=================================================

使用SVC寻找不平衡分类问题的最优分割超平面

我们首先使用一个简单的SVC找到分割超平面，然后(用虚线)画出分离超平面,对那些不平衡类别进行自动矫正。

.. currentmodule:: sklearn.linear_model

.. note::

    使用 ``SGDClassifier(loss="hinge")`` 替换 ``SVC(kernel="linear")`` 以后，
    这个例子仍然可以工作。 设置 :class:`SGDClassifier`  类的 ``loss`` 参数
    为 ``hinge`` 将产生与带有线性核的SVC一样的行为。

    比如尝试用下面的估计器实例替换 ``SVC``::

        clf = SGDClassifier(n_iter=100, alpha=0.01)





.. image:: /auto_examples/svm/images/sphx_glr_plot_separating_hyperplane_unbalanced_001.png
    :class: sphx-glr-single-img





.. code-block:: python

    print(__doc__)

    import numpy as np
    import matplotlib.pyplot as plt
    from sklearn import svm
    from sklearn.datasets import make_blobs

    # we create two clusters of random points
    n_samples_1 = 1000
    n_samples_2 = 100
    centers = [[0.0, 0.0], [2.0, 2.0]]
    clusters_std = [1.5, 0.5]
    X, y = make_blobs(n_samples=[n_samples_1, n_samples_2],
                      centers=centers,
                      cluster_std=clusters_std,
                      random_state=0, shuffle=False)

    # fit the model and get the separating hyperplane
    clf = svm.SVC(kernel='linear', C=1.0)
    clf.fit(X, y)

    # fit the model and get the separating hyperplane using weighted classes
    wclf = svm.SVC(kernel='linear', class_weight={1: 10})
    wclf.fit(X, y)

    # plot the samples
    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Paired, edgecolors='k')

    # plot the decision functions for both classifiers
    ax = plt.gca()
    xlim = ax.get_xlim()
    ylim = ax.get_ylim()

    # create grid to evaluate model
    xx = np.linspace(xlim[0], xlim[1], 30)
    yy = np.linspace(ylim[0], ylim[1], 30)
    YY, XX = np.meshgrid(yy, xx)
    xy = np.vstack([XX.ravel(), YY.ravel()]).T

    # get the separating hyperplane
    Z = clf.decision_function(xy).reshape(XX.shape)

    # plot decision boundary and margins
    a = ax.contour(XX, YY, Z, colors='k', levels=[0], alpha=0.5, linestyles=['-'])

    # get the separating hyperplane for weighted classes
    Z = wclf.decision_function(xy).reshape(XX.shape)

    # plot decision boundary and margins for weighted classes
    b = ax.contour(XX, YY, Z, colors='r', levels=[0], alpha=0.5, linestyles=['-'])

    plt.legend([a.collections[0], b.collections[0]], ["non weighted", "weighted"],
               loc="upper right")
    plt.show()

**Total running time of the script:** ( 0 minutes  0.051 seconds)


.. _sphx_glr_download_auto_examples_svm_plot_separating_hyperplane_unbalanced.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_separating_hyperplane_unbalanced.py <plot_separating_hyperplane_unbalanced.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_separating_hyperplane_unbalanced.ipynb <plot_separating_hyperplane_unbalanced.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
